{"version":3,"sources":["../src/datasource.js"],"names":["Datasource","instanceSettings","$q","backendSrv","templateSrv","login","datasourceRequest","url","method","data","username","usersecret","headers","then","result","token","token_expiry","Date","now","status","message","catch","err","console","error","checkToken","doQuery","query","doQueries","Promise","all","queries","map","getVariables","options","toValue","text","x","value","replaceInterval","slice","range","from","utc","format","to","vars","__from","__to","__range","scopedVars","__interval","Object","keys","key","reduce","y","name","id","jsonData","securityEnabled","transformResponse","response","tables","length","table","timestamps","columns","target","datapoints","idx","parse","transformAll","results","a","b","variables","targets","filter","hide","rawSql","replace","when","column","annotation","title","tags","time","rawQuery","reject","log","Error"],"mappings":"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","file":"datasource.js","sourcesContent":["// function zipObject(results) {\n//   const reducer = (acc, key, idx) => ({\n//     ...acc,\n//     [results.name]: results.column[idx],\n//   });\n\n//   return results.reduce(reducer, {});\n// }\n\nexport default class Datasource {\n  constructor(instanceSettings, $q, backendSrv, templateSrv) {\n    this.name = instanceSettings.name;\n    this.id = instanceSettings.id;\n\n    this.url = instanceSettings.jsonData.url;\n    this.securityEnabled = instanceSettings.jsonData.securityEnabled;\n    this.username = (this.securityEnabled && instanceSettings.jsonData.name ? instanceSettings.jsonData.name : \"\");\n    this.username = (this.securityEnabled && instanceSettings.jsonData.usersecret ? instanceSettings.jsonData.usersecret : \"\");\n\n    this.token = \"\";\n    this.token_expiry = Date.now();\n\n    this.$q = $q;\n    this.backendSrv = backendSrv;\n    this.templateSrv = templateSrv;\n  }\n\n  // ---------------------------------------------------------------------------\n\n\n  login = () => this.backendSrv.datasourceRequest({\n    url: `${this.url}/api/login`,\n    method: 'POST',\n    data: `{ \"username\": \"${this.username}\", \"secret_key\": \"${this.usersecret}\" }`,\n    headers: {\n      'Content-Type': 'application/json',\n    },\n  })\n    .then((result) => {\n      this.token = result.data;\n      this.token_expiry = Date.now() + 10/*hours*/ * 60 /*minutes*/ * 60/*seconds*/ * 1000/*milliseconds*/;\n      const status = 'success';\n      const message = 'QuasarDB connection is OK!';\n\n      return { status, message };\n    })\n    .catch((err) => {\n      const status = 'error';\n      const message =\n        'Unable to connect to datasource. ' +\n        'See console for detailed information.';\n\n      if (process.env.NODE_ENV !== 'test') {\n        // eslint-disable-next-line no-console\n        console.error('QDB CONNECTION ERROR:', err);\n      }\n\n      return { status, message };\n    });\n\n  checkToken = () => {\n    if (this.token == \"\" || (this.token_expiry - Date.now()) < 1000) {\n      var status = \"\"\n      var message = \"\"\n      status, message = this.login()\n      if (status == 'error') {\n        return { status, message };\n      }\n    }\n  };\n\n  doQuery = query => this.backendSrv.datasourceRequest({\n    url: `${this.url}/api/query`,\n    method: 'POST',\n    data: `\"${query}\"`,\n    headers: {\n      'Content-Type': 'application/json',\n      'Authorization': `Bearer ${this.token}`\n    },\n  });\n\n  doQueries = queries => Promise.all(queries.map(this.doQuery));\n\n  getVariables = (options) => {\n    const toValue = x => ({\n      text: x,\n      value: x,\n    });\n\n    const replaceInterval = x => (\n      x.slice(-1) === 'm'\n        ? `${x}in`\n        : x\n    );\n\n    const range = {\n      from: options.range.from.utc().format('YYYY-MM-DD[T]HH:mm:ss'),\n      to: options.range.to.utc().format('YYYY-MM-DD[T]HH:mm:ss'),\n    };\n\n    const vars = {\n      __from: range.from,\n      __to: range.to,\n      __range: `range(${range.from}, ${range.to})`,\n    };\n\n    if (options.scopedVars && options.scopedVars.__interval) {\n      const { value } = options.scopedVars.__interval;\n      vars.__interval = replaceInterval(value);\n    }\n\n    return {\n      ...options.scopedVars,\n      ...Object.keys(vars)\n        .map(key => ({ [key]: toValue(vars[key]) }))\n        .reduce((x, y) => ({ ...y, ...x }), {}),\n    };\n  };\n\n  // ---------------------------------------------------------------------------\n\n  query(options) {\n\n    this.checkToken();\n    const transformResponse = (response) => {\n      const result = response.data;\n      if (result.tables.length === 0) {\n        return [];\n      }\n      const table = result.tables[0];\n      const timestamps = table.columns[0].data;\n\n      const target = table.columns[1].name;\n      const datapoints = table.columns[1].data.map((value, idx) =>\n        [value, Date.parse(timestamps[idx])]);\n\n      return [{ target, datapoints }];\n    };\n\n    const transformAll = (results) => {\n      const data = results.map(transformResponse).reduce((a, b) => [...a, ...b], []);\n      return { data };\n    };\n\n    const variables = this.getVariables(options);\n    const queries = options.targets\n      .filter(x => (!x.hide && x.rawSql))\n      .map(x => this.templateSrv.replace(x.rawSql, variables));\n\n    if (!queries.length) {\n      const data = [];\n      return this.$q.when({ data });\n    }\n\n    return this.doQueries(queries).then(transformAll);\n  }\n\n  annotationQuery(options) {\n    this.checkToken();\n    const transformResponse = (response) => {\n      if (!response.data.tables.length) {\n        return [];\n      }\n\n      const data = response.data.tables[0];\n\n      return data.columns.map((column) => {\n\n        const { annotation } = options;\n        const { title } = column.name;\n        const { text } = column.name;\n        const { tags } = [];\n\n        const time = Date.parse(data.columns[0].data[0]);\n\n        return { annotation, time, title, text, tags };\n      });\n    };\n\n    const rawQuery = options.annotation.query;\n\n    if (!rawQuery) {\n      const message = 'Query missing in annotation definition';\n      return this.$q.reject({ message });\n    }\n\n    const variables = this.getVariables(options);\n    const query = this.templateSrv.replace(rawQuery, variables);\n\n    return this.doQuery(query).then(transformResponse);\n  }\n\n  metricFindQuery(query) {\n    console.log('metricFindQuery:', query);\n    throw new Error('metricFindQuery is not yet implemented.');\n  }\n\n  testDatasource() {\n    return this.login()\n  }\n}\n"]}