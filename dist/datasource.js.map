{"version":3,"sources":["../src/datasource.js"],"names":["Datasource","instanceSettings","$q","backendSrv","templateSrv","doQuery","query","format","console","log","datasourceRequest","url","method","data","headers","Authorization","token","then","result","doQueries","Promise","all","queries","map","getVariables","toValue","text","x","value","replaceInterval","slice","range","from","options","utc","to","vars","__from","__to","__range","scopedVars","__interval","Object","keys","key","reduce","y","transformDate","d","Date","parse","maxDurationYear","epochYear","transformValue","v","window","atob","error","transformResponse","response","tables","length","table","colCount","columns","rowCount","c","i","name","type","rows","row","j","push","timestamps","results","target","datapoints","idx","transformAll","a","b","securityEnabled","jsonData","username","usersecret","secret","id","token_expiry","now","status","message","login","Error","variables","targets","filter","t","hide","rawSql","resultFormat","replace","checkToken","transformedResults"],"mappings":"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","file":"datasource.js","sourcesContent":["export default class Datasource {\n  constructor(instanceSettings, $q, backendSrv, templateSrv) {\n    const securityEnabled = instanceSettings.jsonData.securityEnabled\n    const username = securityEnabled ? instanceSettings.jsonData.name : 'anonymous'\n    const usersecret = securityEnabled ? instanceSettings.jsonData.secret : ''\n    const maxDurationYear = Date.parse('1971-01-01')\n    const epochYear = Date.parse('1970-01-01')\n\n    this.name = instanceSettings.name\n    this.id = instanceSettings.id\n    this.url = instanceSettings.url\n    this.username = username\n    this.usersecret = usersecret\n    this.token = ''\n    this.token_expiry = Date.now()\n\n    this.$q = $q\n    this.backendSrv = backendSrv\n    this.templateSrv = templateSrv\n\n    this.maxDurationYear = maxDurationYear\n    this.epochYear = epochYear\n    \n    console.log('-- :: construct')\n  }\n\n  async login() {\n    try {\n      const result = await this.backendSrv.datasourceRequest({\n        url: `${this.url}/api/login`,\n        method: 'POST',\n        data: `{ \"username\": \"${this.username}\", \"secret_key\": \"${this.usersecret}\" }`,\n        headers: {\n          'Content-Type': 'application/json'\n        }\n      })\n\n      this.token = result.data.token\n      this.token_expiry = Date.now() + 10 * 60 * 60 * 1000\n\n      const status = 'success'\n      const message = 'QuasarDB connection is OK!'\n      return { status, message }\n    } catch (err) {\n      const status = 'error'\n      const message = 'Unable to connect to datasource. See console for detailed information.'\n\n      if (process.env.NODE_ENV !== 'dev') {\n        console.error('QDB CONNECTION ERROR:', err)\n      }\n\n      return { status, message }\n    }\n  }\n\n  async checkToken() {\n    if (this.token === '' || this.token_expiry - Date.now() < 1000) {\n      const result = await this.login()\n\n      if (result.status === 'error') {\n        throw new Error(result.message)\n      }\n    }\n\n    return\n  }\n\n  doQuery = ({ query, format }) => {\n    console.log('query:', query)\n    return this.backendSrv\n      .datasourceRequest({\n        url: `${this.url}/api/query`,\n        method: 'POST',\n        data: `{ \"query\" : \"${query}\" }`,\n        headers: { 'Content-Type': 'application/json', Authorization: `Bearer ${this.token}` }\n      })\n      .then(result => {\n        result.data.format = format\n        return result\n      })\n  }\n\n  doQueries = queries => Promise.all(queries.map(this.doQuery))\n\n  getVariables = options => {\n    const toValue = x => ({\n      text: x,\n      value: x\n    })\n\n    const replaceInterval = x => (x.slice(-1) === 'm' ? `${x}in` : x)\n\n    const range = {\n      from: options.range.from.utc().format('YYYY-MM-DD[T]HH:mm:ss'),\n      to: options.range.to.utc().format('YYYY-MM-DD[T]HH:mm:ss')\n    }\n\n    const vars = {\n      __from: range.from,\n      __to: range.to,\n      __range: `range(${range.from}, ${range.to})`\n    }\n\n    if (options.scopedVars && options.scopedVars.__interval) {\n      const { value } = options.scopedVars.__interval\n      vars.__interval = replaceInterval(value)\n    }\n\n    return {\n      ...options.scopedVars,\n      ...Object.keys(vars)\n        .map(key => ({ [key]: toValue(vars[key]) }))\n        .reduce((x, y) => ({ ...y, ...x }), {})\n    }\n  }\n\n  transformDate = value => {\n    let d = Date.parse(value)\n    // handle timestamp as duration\n    if (d < this.maxDurationYear) {\n      return d - this.epochYear\n    }\n    return d\n  }\n\n  transformValue = value => {\n    if (typeof value == 'string') {\n      try {\n        let v = window.atob(value)\n        return v\n      } catch (error) {\n        return value\n      }\n    }\n    return value\n  }\n\n  transformResponse = response => {\n    const result = response.data\n    if (result.tables.length === 0) {\n      return []\n    }\n    console.log('waaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa')\n\n    switch (response.data.format) {\n      case 'table': {\n        const table = result.tables[0]\n        const colCount = table.columns.length\n        const rowCount = table.columns[0].data.length\n        const columns = table.columns.map((c, i) => {\n          let result = { text: c.name }\n          if (i === 0) {\n            result.type = 'time'\n          }\n          return result\n        })\n        let rows = []\n        for (let i = 0; i < rowCount; i++) {\n          let row = []\n          for (let j = 0; j < colCount; j++) {\n            const value = table.columns[j].data[i]\n            console.log('value:', value)\n\n            if (j == 0) {\n              row.push(this.transformDate(value))\n            } else {\n              console.log('value:', value)\n              row.push(transformValue(value))\n            }\n          }\n          rows.push(row)\n        }\n\n        return [\n          {\n            columns,\n            rows,\n            type: 'table'\n          }\n        ]\n      }\n      default: {\n        const table = result.tables[0]\n        const timestamps = table.columns[0].data\n\n        let results = []\n\n        for (let i = 1; i < table.columns.length; i++) {\n          const target = table.columns[i].name\n          const datapoints = table.columns[i].data.map((value, idx) => [\n            value,\n            this.transformDate(value)\n          ])\n          results.push({ target, datapoints })\n        }\n\n        return results\n      }\n    }\n  }\n\n  transformAll = results => {\n    const data = results.map(this.transformResponse).reduce((a, b) => [...a, ...b], [])\n    return { data }\n  }\n\n  async query(options) {\n    const variables = this.getVariables(options)\n\n    const queries = options.targets\n      .filter(t => !t.hide && t.rawSql)\n      .map(t => {\n        return {\n          format: t.resultFormat,\n          query: this.templateSrv.replace(t.rawSql, variables)\n        }\n      })\n\n    if (!queries.length) {\n      return { data: [] }\n    }\n\n    await this.checkToken()\n    const results = await this.doQueries(queries)\n    const transformedResults = await this.transformAll(results)\n    return transformedResults\n  }\n\n  annotationQuery(options) {\n    throw new Error('annotations not yet implemented.')\n  }\n\n  metricFindQuery(query) {\n    throw new Error('metrics not yet implemented.')\n  }\n\n  testDatasource() {\n    return this.login()\n  }\n}\n"]}