{"version":3,"sources":["../src/datasource.js"],"names":["Datasource","instanceSettings","$q","backendSrv","templateSrv","doQuery","query","format","datasourceRequest","url","method","data","headers","Authorization","token","then","result","doQueries","Promise","all","queries","map","getVariables","toValue","text","x","value","replaceInterval","slice","range","from","options","utc","to","vars","__from","__to","__range","scopedVars","__interval","Object","keys","key","reduce","y","transformResponse","response","tables","length","table","timestamps","columns","colCount","rowCount","c","i","name","type","rows","row","j","push","Date","parse","atob","results","target","datapoints","idx","transformAll","a","b","securityEnabled","jsonData","username","usersecret","secret","id","token_expiry","now","status","message","console","error","login","Error","variables","targets","filter","t","hide","rawSql","resultFormat","replace","checkToken","transformedResults"],"mappings":"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","file":"datasource.js","sourcesContent":["export default class Datasource {\n  constructor(instanceSettings, $q, backendSrv, templateSrv) {\n    const securityEnabled = instanceSettings.jsonData.securityEnabled\n    const username = securityEnabled ? instanceSettings.jsonData.name : 'anonymous'\n    const usersecret = securityEnabled ? instanceSettings.jsonData.secret : ''\n\n    this.name = instanceSettings.name\n    this.id = instanceSettings.id\n    this.url = instanceSettings.url\n    this.username = username\n    this.usersecret = usersecret\n    this.token = ''\n    this.token_expiry = Date.now()\n\n    this.$q = $q\n    this.backendSrv = backendSrv\n    this.templateSrv = templateSrv\n  }\n\n  async login() {\n    try {\n      const result = await this.backendSrv.datasourceRequest({\n        url: `${this.url}/api/login`,\n        method: 'POST',\n        data: `{ \"username\": \"${this.username}\", \"secret_key\": \"${this.usersecret}\" }`,\n        headers: {\n          'Content-Type': 'application/json'\n        }\n      })\n\n      this.token = result.data.token\n      this.token_expiry = Date.now() + 10 * 60 * 60 * 1000\n\n      const status = 'success'\n      const message = 'QuasarDB connection is OK!'\n      return { status, message }\n    } catch (err) {\n      const status = 'error'\n      const message = 'Unable to connect to datasource. See console for detailed information.'\n\n      if (process.env.NODE_ENV !== 'dev') {\n        console.error('QDB CONNECTION ERROR:', err)\n      }\n\n      return { status, message }\n    }\n  }\n\n  async checkToken() {\n    if (this.token === '' || this.token_expiry - Date.now() < 1000) {\n      const result = await this.login()\n\n      if (result.status === 'error') {\n        throw new Error(result.message)\n      }\n    }\n\n    return\n  }\n\n  doQuery = ({ query, format }) => {\n    return this.backendSrv.datasourceRequest({\n      url: `${this.url}/api/query`,\n      method: 'POST',\n      data: `{ \"query\" : \"${query}\" }`,\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: `Bearer ${this.token}`\n      }\n    }).then(result => {\n      result.data.format = format\n      return result\n    })\n  }\n\n  doQueries = queries => Promise.all(queries.map(this.doQuery))\n\n  getVariables = options => {\n    const toValue = x => ({\n      text: x,\n      value: x\n    })\n\n    const replaceInterval = x => (x.slice(-1) === 'm' ? `${x}in` : x)\n\n    const range = {\n      from: options.range.from.utc().format('YYYY-MM-DD[T]HH:mm:ss'),\n      to: options.range.to.utc().format('YYYY-MM-DD[T]HH:mm:ss')\n    }\n\n    const vars = {\n      __from: range.from,\n      __to: range.to,\n      __range: `range(${range.from}, ${range.to})`\n    }\n\n    if (options.scopedVars && options.scopedVars.__interval) {\n      const { value } = options.scopedVars.__interval\n      vars.__interval = replaceInterval(value)\n    }\n\n    return {\n      ...options.scopedVars,\n      ...Object.keys(vars)\n        .map(key => ({ [key]: toValue(vars[key]) }))\n        .reduce((x, y) => ({ ...y, ...x }), {})\n    }\n  }\n\n  transformResponse = response => {\n    const result = response.data\n    if (result.tables.length === 0) {\n      return []\n    }\n\n    switch (response.data.format) {\n      case 'table': {\n        const table = result.tables[0]\n        const timestamps = table.columns[0].data\n        const colCount = table.columns.length\n        const rowCount = table.columns[0].data.length\n        const columns = table.columns.map((c, i) => {\n          let result = { text: c.name }\n          if (i === 0) {\n            result.type = 'time'\n          }\n          return result\n        })\n        let rows = []\n        for (let i = 0; i < rowCount; i++) {\n          let row = []\n          for (let j = 0; j < colCount; j++) {\n            const value = table.columns[j].data[i]\n\n            if (j == 0) {\n              row.push(Date.parse(value))\n            } else if (typeof value == 'string') {\n              row.push(atob(value))\n            } else {\n              row.push(table.columns[j].data[i])\n            }\n          }\n          rows.push(row)\n        }\n\n        return [{\n          columns,\n          rows,\n          type: 'table'\n        }]\n      }\n      default: {\n        const table = result.tables[0]\n        const timestamps = table.columns[0].data\n\n        let results = []\n\n        for (let i = 1; i < table.columns.length; i++) {\n          const target = table.columns[i].name\n          const datapoints = table.columns[i].data.map((value, idx) => [\n            value,\n            Date.parse(timestamps[idx])\n          ])\n          results.push({ target, datapoints })\n        }\n\n        return results\n      }\n    }\n  }\n\n  transformAll = results => {\n    const data = results.map(this.transformResponse).reduce((a, b) => [...a, ...b], [])\n    return { data }\n  }\n\n  async query(options) {\n    const variables = this.getVariables(options)\n\n    const queries = options.targets\n      .filter(t => !t.hide && t.rawSql)\n      .map(t => {\n        return {\n          format: t.resultFormat,\n          query: this.templateSrv.replace(t.rawSql, variables)\n        }\n      })\n\n    if (!queries.length) {\n      return { data: [] }\n    }\n\n    await this.checkToken()\n    const results = await this.doQueries(queries)\n    const transformedResults = await this.transformAll(results)\n    return transformedResults\n  }\n\n  annotationQuery(options) {\n    throw new Error('annotations not yet implemented.')\n  }\n\n  metricFindQuery(query) {\n    throw new Error('metrics not yet implemented.')\n  }\n\n  testDatasource() {\n    return this.login()\n  }\n}\n"]}