{"version":3,"sources":["../src/datasource.js"],"names":["extractMacrosFunction","query","macro","macroStart","fromIndex","matchIndex","indexOf","matches","stack","startIndex","length","i","ch","charAt","push","pop","start","end","template","substring","trim","transformValue","column_type","value","Date","parse","atob","transformResponse","response","maxDurationYear","result","data","tables","format","table","colCount","columns","rowCount","map","c","text","name","type","d","rows","row","j","timestamps","results","target","datapoints","idx","transformAll","reduce","a","b","window","req","require","variableRegex","Datasource","instanceSettings","$q","backendSrv","templateSrv","doQuery","test","split","regex","datasourceRequest","url","method","params","headers","Authorization","token","then","doQueries","Promise","all","queries","getVariables","toValue","x","replaceInterval","slice","range","from","options","utc","to","vars","__from","__to","__range","scopedVars","__interval","Object","keys","key","y","securityEnabled","jsonData","username","usersecret","secret","id","token_expiry","now","status","message","console","error","login","Error","dashVars","macroVariables","Array","matchAll","fullVariableName","match","variableName","dashVar","find","dv","multi","current","isArray","fullName","join","extractMacroVariables","filter","m","resultTemplate","replaceAll","sql","variables","commaMacros","renderMacroTemplate","orMacros","andMacros","replace","log","targets","t","hide","rawSql","resultFormat","buildQueryTemplate","checkToken","transformedResults","tag"],"mappings":"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","file":"datasource.js","sourcesContent":["var atob\nif (typeof window === 'undefined') {\n  const req = require('atob')\n  atob = req.atob\n} else {\n  atob = window.atob\n}\n\n// This is taken from https://github.com/grafana/grafana/blob/master/public/app/features/variables/utils.ts#L16\nconst variableRegex = /\\$(\\w+)|\\[\\[([\\s\\S]+?)(?::(\\w+))?\\]\\]|\\${(\\w+)(?:\\.([^:^\\}]+))?(?::([^\\}]+))?}/g\n\nfunction extractMacrosFunction(query, macro) {\n  const macroStart = `${macro}(`\n\n  let fromIndex = 0\n  let matchIndex = query.indexOf(macroStart, fromIndex)\n  let matches = []\n  \n  while (matchIndex != -1) {\n    let stack = []\n    const startIndex = matchIndex + macroStart.length\n    for (let i = startIndex; i < query.length; i++) {\n      const ch = query.charAt(i)\n      if (ch === '(') {\n        stack.push(ch)\n      } else if (ch === ')') {\n        if (stack.length) {\n          stack.pop()\n        } else {\n          matches.push({ \n            start: matchIndex,\n            end: i,\n            template: query.substring(startIndex, i).trim() \n          })\n          fromIndex = i\n          break\n        }\n      }\n    }\n    matchIndex = query.indexOf(macroStart, fromIndex)\n  }\n  return matches\n}\n\nexport function transformValue(column_type, value) {\n  switch (column_type) {\n    case 'timestamp':\n      return Date.parse(value)\n    case 'blob':\n      return atob(value)\n    case 'string':\n    case 'symbol':\n    case 'double':\n    case 'int64':\n    case 'count':\n      return value\n    case 'none':\n      return null\n    default:\n      throw 'unexpected column type: ' + column_type\n  }\n}\n\nexport function transformResponse(response) {\n  const maxDurationYear = Date.parse('1971-01-01')\n  const result = response.data\n  if (result.tables.length === 0) {\n    return []\n  }\n\n  switch (response.data.format) {\n    case 'table': {\n      const table = result.tables[0]\n      const colCount = table.columns.length\n      const rowCount = table.columns[0].data.length\n      const columns = table.columns.map((c, i) => {\n        let result = { text: c.name }\n        if (c.data.length > 0 && c.type == 'timestamp') {\n          let d = Date.parse(c.data[0])\n          if (d >= maxDurationYear) {\n            result.type = 'time'\n          }\n        }\n        return result\n      })\n      let rows = []\n      for (let i = 0; i < rowCount; i++) {\n        let row = []\n        for (let j = 0; j < colCount; j++) {\n          const value = table.columns[j].data[i]\n          row.push(transformValue(table.columns[j].type, value))\n        }\n        rows.push(row)\n      }\n\n      return [\n        {\n          columns,\n          rows,\n          type: 'table'\n        }\n      ]\n    }\n    default: {\n      const table = result.tables[0]\n      const timestamps = table.columns[0].data\n\n      let results = []\n\n      for (let i = 1; i < table.columns.length; i++) {\n        const target = table.columns[i].name\n        const datapoints = table.columns[i].data.map((value, idx) => [\n          transformValue(table.columns[i].type, value),\n          Date.parse(timestamps[idx])\n        ])\n        results.push({ target, datapoints })\n      }\n\n      return results\n    }\n  }\n}\n\nexport function transformAll(results) {\n  const data = results.map(transformResponse).reduce((a, b) => [...a, ...b], [])\n  return { data }\n}\n\nexport default class Datasource {\n  constructor(instanceSettings, $q, backendSrv, templateSrv) {\n    const securityEnabled = instanceSettings.jsonData.securityEnabled\n    const username = securityEnabled ? instanceSettings.jsonData.name : 'anonymous'\n    const usersecret = securityEnabled ? instanceSettings.jsonData.secret : ''\n\n    this.name = instanceSettings.name\n    this.id = instanceSettings.id\n    this.url = instanceSettings.url\n    this.username = username\n    this.usersecret = usersecret\n    this.token = ''\n    this.token_expiry = Date.now()\n\n    this.$q = $q\n    this.backendSrv = backendSrv\n    this.templateSrv = templateSrv\n  }\n\n  async login() {\n    try {\n      const result = await this.backendSrv.datasourceRequest({\n        url: `${this.url}/api/login`,\n        method: 'POST',\n        data: `{ \"username\": \"${this.username}\", \"secret_key\": \"${this.usersecret}\" }`,\n        headers: {\n          'Content-Type': 'application/json'\n        }\n      })\n\n      this.token = result.data.token\n      this.token_expiry = Date.now() + 10 * 60 * 60 * 1000\n\n      const status = 'success'\n      const message = 'QuasarDB connection is OK!'\n      return { status, message }\n    } catch (err) {\n      const status = 'error'\n      const message = 'Unable to connect to datasource. See console for detailed information.'\n\n      if (process.env.NODE_ENV !== 'dev') {\n        console.error('QDB CONNECTION ERROR:', err)\n      }\n\n      return { status, message }\n    }\n  }\n\n  async checkToken() {\n    if (this.token === '' || this.token_expiry - Date.now() < 1000) {\n      const result = await this.login()\n\n      if (result.status === 'error') {\n        throw new Error(result.message)\n      }\n    }\n\n    return\n  }\n\n  doQuery = ({ query, format }) => {\n    query = query.trim()\n    // show tags with regex filter\n    // query format: show tags where tag ~ <regex>\n    if (/^show\\s+tags\\s+where\\s+tag\\s+~\\s+\\S+$/i.test(query)) {\n      const [, , , , , regex] = query.split(/\\s+/)\n      return this.backendSrv\n        .datasourceRequest({\n          url: `${this.url}/api/tags`,\n          method: 'GET',\n          params: { regex },\n          headers: { Authorization: `Bearer ${this.token}` }\n        })\n        .then(result => {\n          result.data.format = format\n          return result\n        })\n    }\n    // show all tags\n    // query format: show tags\n    else if (/^show\\s+tags$/i.test(query)) {\n      return this.backendSrv\n        .datasourceRequest({\n          url: `${this.url}/api/tags`,\n          method: 'GET',\n          headers: { Authorization: `Bearer ${this.token}` }\n        })\n        .then(result => {\n          result.data.format = format\n          return result\n        })\n    }\n    // default query\n    else {\n      return this.backendSrv\n        .datasourceRequest({\n          url: `${this.url}/api/query`,\n          method: 'POST',\n          data: `{ \"query\" : \"${query}\" }`,\n          headers: { 'Content-Type': 'application/json', Authorization: `Bearer ${this.token}` }\n        })\n        .then(result => {\n          result.data.format = format\n          return result\n        })\n    }\n  }\n\n  doQueries = queries => Promise.all(queries.map(this.doQuery))\n\n  getVariables = options => {\n    const toValue = x => ({\n      text: x,\n      value: x\n    })\n\n    const replaceInterval = x => (x.slice(-1) === 'm' ? `${x}in` : x)\n\n    const range = {\n      from: options.range.from.utc().format('YYYY-MM-DD[T]HH:mm:ss'),\n      to: options.range.to.utc().format('YYYY-MM-DD[T]HH:mm:ss')\n    }\n\n    const vars = {\n      __from: range.from,\n      __to: range.to,\n      __range: `range(${range.from}, ${range.to})`\n    }\n\n    if (options.scopedVars && options.scopedVars.__interval) {\n      const { value } = options.scopedVars.__interval\n      vars.__interval = replaceInterval(value)\n    }\n\n    return {\n      ...options.scopedVars,\n      ...Object.keys(vars)\n        .map(key => ({ [key]: toValue(vars[key]) }))\n        .reduce((x, y) => ({ ...y, ...x }), {})\n    }\n  }\n\n  extractMacroVariables(template) {\n    const dashVars = this.templateSrv.getVariables()\n    const macroVariables = Array.from(template.matchAll(variableRegex))\n    return macroVariables.map(match => {\n      const fullVariableName = match[0]\n      let variableName\n      for (let i = 1; i < match.length; i++) {\n        variableName = match[i]\n        if (variableName) {\n          break\n        }\n      }\n      const dashVar = dashVars.find(dv => dv.name === variableName)\n\n      // we only consider multi variables\n      if (dashVar && dashVar.multi) {\n        // ensure the current value is always an array when multi is true\n        // sometimes (rarely) it seems to come through as a string\n        let value = dashVar.current.value || []\n        value = Array.isArray(value) ? value : [value]\n\n        return {\n          fullName: fullVariableName,\n          name: variableName,\n          value: value\n        } \n      }\n\n      return {\n        fullName: fullVariableName,\n        name: variableName\n      } \n    })\n  }\n\n  renderMacroTemplate(template, join) {\n    // we only want macros that have a value\n    let macroVariables = this.extractMacroVariables(template).filter(m => !!m.value)\n    // all macrovariables value array length should be the same\n    let result = []\n    for (let i = 0; i < macroVariables[0].value.length; i++) {\n      let resultTemplate = template\n      for (let j = 0; j < macroVariables.length; j++) {\n        resultTemplate = resultTemplate.replaceAll(macroVariables[j].fullName, macroVariables[j].value[i])\n      }\n      result.push(resultTemplate)\n    }\n    return result.join(join)\n  }\n\n  buildQueryTemplate(sql, variables) {\n    let commaMacros = extractMacrosFunction(sql, '$__comma')\n    if (commaMacros.length) {\n      sql = commaMacros.reduce((query, macro) => {\n        const template = this.renderMacroTemplate(macro.template, ', ')\n        return query.substring(0, macro.start) + template + query.substring(macro.end + 1)\n      }, sql)\n    }\n\n    let orMacros = extractMacrosFunction(sql, '$__or')\n    if (orMacros.length) {\n      sql = orMacros.reduce((query, macro) => {\n        const template = this.renderMacroTemplate(macro.template, ' OR ')\n        return query.substring(0, macro.start) + template + query.substring(macro.end + 1)\n      }, sql)\n    }\n\n    let andMacros = extractMacrosFunction(sql, '$__and')\n    if (andMacros.length) {\n      sql = andMacros.reduce((query, macro) => {\n        const template = this.renderMacroTemplate(macro.template, ' AND ')\n        return query.substring(0, macro.start) + template + query.substring(macro.end + 1)\n      }, sql)\n    }\n\n    const result = this.templateSrv.replace(sql, variables)\n    console.log(result)\n    return result\n  }\n\n  async query(options) {\n    const variables = this.getVariables(options)\n\n    const queries = options.targets\n      .filter(t => !t.hide && t.rawSql)\n      .map(t => {\n        return {\n          format: t.resultFormat,\n          query: this.buildQueryTemplate(t.rawSql, variables)\n        }\n      })\n\n    if (!queries.length) {\n      return { data: [] }\n    }\n\n    await this.checkToken()\n    const results = await this.doQueries(queries)\n    const transformedResults = await transformAll(results)\n    return transformedResults\n  }\n\n  annotationQuery(options) {\n    throw new Error('annotations not yet implemented.')\n  }\n\n  async metricFindQuery(query) {\n    query = query.trim()\n    // exit early if query is blank otherwise the server will return an invalid query error\n    if (query == '') {\n      return []\n    }\n\n    await this.checkToken()\n    const response = await this.doQuery({ query })\n\n    try {\n      const result = response.data.tables[0].columns[0].data.map(tag => ({ text: tag }))\n      return result\n    } catch (error) {\n      console.log(error)\n      console.log(response)\n      throw Error('Unexpected metricFindQuery error. See console output for more information.')\n    }\n  }\n\n  testDatasource() {\n    return this.login()\n  }\n}"]}