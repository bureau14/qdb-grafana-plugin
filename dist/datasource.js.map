{"version":3,"sources":["../src/datasource.js"],"names":["Datasource","instanceSettings","$q","backendSrv","templateSrv","doQuery","query","format","datasourceRequest","url","method","data","headers","Authorization","token","then","result","doQueries","Promise","all","queries","map","getVariables","toValue","text","x","value","replaceInterval","slice","range","from","options","utc","to","vars","__from","__to","__range","scopedVars","__interval","Object","keys","key","reduce","y","transformDate","d","Date","parse","maxDurationYear","transformValue","v","window","atob","error","transformResponse","response","tables","length","table","colCount","columns","rowCount","c","i","name","type","rows","row","j","push","timestamps","results","target","datapoints","idx","transformAll","a","b","securityEnabled","jsonData","username","usersecret","secret","id","token_expiry","now","status","message","console","login","Error","variables","targets","filter","t","hide","rawSql","resultFormat","replace","checkToken","transformedResults"],"mappings":"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","file":"datasource.js","sourcesContent":["export default class Datasource {\n  constructor(instanceSettings, $q, backendSrv, templateSrv) {\n    const securityEnabled = instanceSettings.jsonData.securityEnabled\n    const username = securityEnabled ? instanceSettings.jsonData.name : 'anonymous'\n    const usersecret = securityEnabled ? instanceSettings.jsonData.secret : ''\n    const maxDurationYear = Date.parse('1971-01-01')\n\n    this.name = instanceSettings.name\n    this.id = instanceSettings.id\n    this.url = instanceSettings.url\n    this.username = username\n    this.usersecret = usersecret\n    this.token = ''\n    this.token_expiry = Date.now()\n\n    this.$q = $q\n    this.backendSrv = backendSrv\n    this.templateSrv = templateSrv\n    this.maxDurationYear = maxDurationYear\n  }\n\n  async login() {\n    try {\n      const result = await this.backendSrv.datasourceRequest({\n        url: `${this.url}/api/login`,\n        method: 'POST',\n        data: `{ \"username\": \"${this.username}\", \"secret_key\": \"${this.usersecret}\" }`,\n        headers: {\n          'Content-Type': 'application/json'\n        }\n      })\n\n      this.token = result.data.token\n      this.token_expiry = Date.now() + 10 * 60 * 60 * 1000\n\n      const status = 'success'\n      const message = 'QuasarDB connection is OK!'\n      return { status, message }\n    } catch (err) {\n      const status = 'error'\n      const message = 'Unable to connect to datasource. See console for detailed information.'\n\n      if (process.env.NODE_ENV !== 'dev') {\n        console.error('QDB CONNECTION ERROR:', err)\n      }\n\n      return { status, message }\n    }\n  }\n\n  async checkToken() {\n    if (this.token === '' || this.token_expiry - Date.now() < 1000) {\n      const result = await this.login()\n\n      if (result.status === 'error') {\n        throw new Error(result.message)\n      }\n    }\n\n    return\n  }\n\n  doQuery = ({ query, format }) => {\n    return this.backendSrv.datasourceRequest({\n      url: `${this.url}/api/query`,\n      method: 'POST',\n      data: `{ \"query\" : \"${query}\" }`,\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: `Bearer ${this.token}`\n      }\n    }).then(result => {\n      result.data.format = format\n      return result\n    })\n  }\n\n  doQueries = queries => Promise.all(queries.map(this.doQuery))\n\n  getVariables = options => {\n    const toValue = x => ({\n      text: x,\n      value: x\n    })\n\n    const replaceInterval = x => (x.slice(-1) === 'm' ? `${x}in` : x)\n\n    const range = {\n      from: options.range.from.utc().format('YYYY-MM-DD[T]HH:mm:ss'),\n      to: options.range.to.utc().format('YYYY-MM-DD[T]HH:mm:ss')\n    }\n\n    const vars = {\n      __from: range.from,\n      __to: range.to,\n      __range: `range(${range.from}, ${range.to})`\n    }\n\n    if (options.scopedVars && options.scopedVars.__interval) {\n      const { value } = options.scopedVars.__interval\n      vars.__interval = replaceInterval(value)\n    }\n\n    return {\n      ...options.scopedVars,\n      ...Object.keys(vars)\n        .map(key => ({ [key]: toValue(vars[key]) }))\n        .reduce((x, y) => ({ ...y, ...x }), {})\n    }\n  }\n\n  transformDate = value => {\n    let d = Date.parse(value)\n    // handle timestamp as duration\n    if (d < this.maxDurationYear) {\n      return this.maxDurationYear - d\n    }\n    return d\n  }\n\n  transformValue = value => {\n    if (typeof value == 'string') {\n      try {\n        let v = window.atob(value)\n        return v\n      } catch (error) {\n        return value\n      }\n    }\n    return value\n  }\n\n  transformResponse = response => {\n    const result = response.data\n    if (result.tables.length === 0) {\n      return []\n    }\n\n    switch (response.data.format) {\n      case 'table': {\n        const table = result.tables[0]\n        const colCount = table.columns.length\n        const rowCount = table.columns[0].data.length\n        const columns = table.columns.map((c, i) => {\n          let result = { text: c.name }\n          if (i === 0) {\n            result.type = 'time'\n          }\n          return result\n        })\n        let rows = []\n        for (let i = 0; i < rowCount; i++) {\n          let row = []\n          for (let j = 0; j < colCount; j++) {\n            const value = table.columns[j].data[i]\n\n            if (j == 0) {\n              row.push(this.transformDate(value))\n            } else {\n              row.push(this.transformValue(value))\n            }\n          }\n          rows.push(row)\n        }\n\n        return [\n          {\n          columns,\n          rows,\n          type: 'table'\n        }]\n      }\n      default: {\n        const table = result.tables[0]\n        const timestamps = table.columns[0].data\n\n        let results = []\n\n        for (let i = 1; i < table.columns.length; i++) {\n          const target = table.columns[i].name\n          const datapoints = table.columns[i].data.map((value, idx) => [\n            value,\n            this.transformDate(timestamps[idx])\n          ])\n          results.push({ target, datapoints })\n        }\n\n        return results\n      }\n    }\n  }\n\n  transformAll = results => {\n    const data = results.map(this.transformResponse).reduce((a, b) => [...a, ...b], [])\n    return { data }\n  }\n\n  async query(options) {\n    const variables = this.getVariables(options)\n\n    const queries = options.targets\n      .filter(t => !t.hide && t.rawSql)\n      .map(t => {\n        return {\n          format: t.resultFormat,\n          query: this.templateSrv.replace(t.rawSql, variables)\n        }\n      })\n\n    if (!queries.length) {\n      return { data: [] }\n    }\n\n    await this.checkToken()\n    const results = await this.doQueries(queries)\n    const transformedResults = await this.transformAll(results)\n    return transformedResults\n  }\n\n  annotationQuery(options) {\n    throw new Error('annotations not yet implemented.')\n  }\n\n  metricFindQuery(query) {\n    throw new Error('metrics not yet implemented.')\n  }\n\n  testDatasource() {\n    return this.login()\n  }\n}\n"]}