{"version":3,"sources":["../src/datasource.js"],"names":["transformValue","column_type","value","Date","parse","atob","transformResponse","response","maxDurationYear","result","data","tables","length","format","table","colCount","columns","rowCount","map","c","i","text","name","type","d","rows","row","j","push","timestamps","results","target","datapoints","idx","transformAll","reduce","a","b","window","req","require","Datasource","instanceSettings","$q","backendSrv","templateSrv","doQuery","query","trim","test","split","regex","datasourceRequest","url","method","params","headers","Authorization","token","then","doQueries","Promise","all","queries","getVariables","toValue","x","replaceInterval","slice","range","from","options","utc","to","vars","__from","__to","__range","scopedVars","__interval","Object","keys","key","y","securityEnabled","jsonData","username","usersecret","secret","id","token_expiry","now","status","message","console","error","login","Error","variables","targets","filter","t","hide","rawSql","resultFormat","replace","checkToken","transformedResults","tag","log"],"mappings":"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","file":"datasource.js","sourcesContent":["var atob\nif (typeof window === 'undefined') {\n  const req = require('atob')\n  atob = req.atob\n} else {\n  atob = window.atob\n}\n\nexport function transformValue(column_type, value) {\n  switch (column_type) {\n    case 'timestamp':\n      return Date.parse(value)\n    case 'blob':\n      return atob(value)\n    case 'string':\n    case 'double':\n    case 'int64':\n    case 'count':\n      return value\n    case 'none':\n      return null\n    default:\n      throw 'unexpected column type: ' + column_type\n  }\n}\n\nexport function transformResponse(response) {\n  const maxDurationYear = Date.parse('1971-01-01')\n  const result = response.data\n  if (result.tables.length === 0) {\n    return []\n  }\n\n  switch (response.data.format) {\n    case 'table': {\n      const table = result.tables[0]\n      const colCount = table.columns.length\n      const rowCount = table.columns[0].data.length\n      const columns = table.columns.map((c, i) => {\n        let result = { text: c.name }\n        if (c.data.length > 0 && c.type == 'timestamp') {\n          let d = Date.parse(c.data[0])\n          if (d >= maxDurationYear) {\n            result.type = 'time'\n          }\n        }\n        return result\n      })\n      let rows = []\n      for (let i = 0; i < rowCount; i++) {\n        let row = []\n        for (let j = 0; j < colCount; j++) {\n          const value = table.columns[j].data[i]\n          row.push(transformValue(table.columns[j].type, value))\n        }\n        rows.push(row)\n      }\n\n      return [\n        {\n          columns,\n          rows,\n          type: 'table'\n        }\n      ]\n    }\n    default: {\n      const table = result.tables[0]\n      const timestamps = table.columns[0].data\n\n      let results = []\n\n      for (let i = 1; i < table.columns.length; i++) {\n        const target = table.columns[i].name\n        const datapoints = table.columns[i].data.map((value, idx) => [\n          transformValue(table.columns[i].type, value),\n          Date.parse(timestamps[idx])\n        ])\n        results.push({ target, datapoints })\n      }\n\n      return results\n    }\n  }\n}\n\nexport function transformAll(results) {\n  const data = results.map(transformResponse).reduce((a, b) => [...a, ...b], [])\n  return { data }\n}\n\nexport default class Datasource {\n  constructor(instanceSettings, $q, backendSrv, templateSrv) {\n    const securityEnabled = instanceSettings.jsonData.securityEnabled\n    const username = securityEnabled ? instanceSettings.jsonData.name : 'anonymous'\n    const usersecret = securityEnabled ? instanceSettings.jsonData.secret : ''\n\n    this.name = instanceSettings.name\n    this.id = instanceSettings.id\n    this.url = instanceSettings.url\n    this.username = username\n    this.usersecret = usersecret\n    this.token = ''\n    this.token_expiry = Date.now()\n\n    this.$q = $q\n    this.backendSrv = backendSrv\n    this.templateSrv = templateSrv\n  }\n\n  async login() {\n    try {\n      const result = await this.backendSrv.datasourceRequest({\n        url: `${this.url}/api/login`,\n        method: 'POST',\n        data: `{ \"username\": \"${this.username}\", \"secret_key\": \"${this.usersecret}\" }`,\n        headers: {\n          'Content-Type': 'application/json'\n        }\n      })\n\n      this.token = result.data.token\n      this.token_expiry = Date.now() + 10 * 60 * 60 * 1000\n\n      const status = 'success'\n      const message = 'QuasarDB connection is OK!'\n      return { status, message }\n    } catch (err) {\n      const status = 'error'\n      const message = 'Unable to connect to datasource. See console for detailed information.'\n\n      if (process.env.NODE_ENV !== 'dev') {\n        console.error('QDB CONNECTION ERROR:', err)\n      }\n\n      return { status, message }\n    }\n  }\n\n  async checkToken() {\n    if (this.token === '' || this.token_expiry - Date.now() < 1000) {\n      const result = await this.login()\n\n      if (result.status === 'error') {\n        throw new Error(result.message)\n      }\n    }\n\n    return\n  }\n\n  doQuery = ({ query, format }) => {\n    query = query.trim()\n    // show tags with regex filter\n    // query format: show tags where tag ~ <regex>\n    if (/^show\\s+tags\\s+where\\s+tag\\s+~\\s+\\S+$/i.test(query)) {\n      const [,,,,, regex] = query.split(/\\s+/)\n      return this.backendSrv\n      .datasourceRequest({\n        url: `${this.url}/api/tags`,\n        method: 'GET',\n        params: { regex },\n        headers: { Authorization: `Bearer ${this.token}` }\n      })\n      .then(result => {\n        result.data.format = format\n        return result\n      })\n    } \n    // show all tags\n    // query format: show tags\n    else if (/^show\\s+tags$/i.test(query)) {\n      return this.backendSrv\n      .datasourceRequest({\n        url: `${this.url}/api/tags`,\n        method: 'GET',\n        headers: { Authorization: `Bearer ${this.token}` }\n      })\n      .then(result => {\n        result.data.format = format\n        return result\n      })\n    } \n    // default query\n    else {\n      return this.backendSrv\n      .datasourceRequest({\n        url: `${this.url}/api/query`,\n        method: 'POST',\n        data: `{ \"query\" : \"${query}\" }`,\n        headers: { 'Content-Type': 'application/json', Authorization: `Bearer ${this.token}` }\n      })\n      .then(result => {\n        result.data.format = format\n        return result\n      })\n    }\n  }\n\n  doQueries = queries => Promise.all(queries.map(this.doQuery))\n\n  getVariables = options => {\n    const toValue = x => ({\n      text: x,\n      value: x\n    })\n\n    const replaceInterval = x => (x.slice(-1) === 'm' ? `${x}in` : x)\n\n    const range = {\n      from: options.range.from.utc().format('YYYY-MM-DD[T]HH:mm:ss'),\n      to: options.range.to.utc().format('YYYY-MM-DD[T]HH:mm:ss')\n    }\n\n    const vars = {\n      __from: range.from,\n      __to: range.to,\n      __range: `range(${range.from}, ${range.to})`\n    }\n\n    if (options.scopedVars && options.scopedVars.__interval) {\n      const { value } = options.scopedVars.__interval\n      vars.__interval = replaceInterval(value)\n    }\n\n    return {\n      ...options.scopedVars,\n      ...Object.keys(vars)\n        .map(key => ({ [key]: toValue(vars[key]) }))\n        .reduce((x, y) => ({ ...y, ...x }), {})\n    }\n  }\n\n  async query(options) {\n    const variables = this.getVariables(options)\n\n    const queries = options.targets\n      .filter(t => !t.hide && t.rawSql)\n      .map(t => {\n        return {\n          format: t.resultFormat,\n          query: this.templateSrv.replace(t.rawSql, variables)\n        }\n      })\n\n    if (!queries.length) {\n      return { data: [] }\n    }\n\n    await this.checkToken()\n    const results = await this.doQueries(queries)\n    const transformedResults = await transformAll(results)\n    return transformedResults\n  }\n\n  annotationQuery(options) {\n    throw new Error('annotations not yet implemented.')\n  }\n\n  async metricFindQuery(query) {\n    query = query.trim()\n    // exit early if query is blank otherwise the server will return an invalid query error\n    if (query == '') {\n      return []\n    }\n\n    await this.checkToken()\n    const response = await this.doQuery({ query })\n\n    try {\n      const result = response.data.tables[0].columns[0].data.map(tag => ({ text: tag}))\n      return result\n    } catch (error) {\n      console.log(error)\n      console.log(response)\n      throw Error('Unexpected metricFindQuery error. See console output for more information.')\n    }\n  }\n\n  testDatasource() {\n    return this.login()\n  }\n}\n"]}