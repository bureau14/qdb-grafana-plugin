{"version":3,"sources":["../src/datasource.js"],"names":["Datasource","instanceSettings","$q","backendSrv","templateSrv","login","datasourceRequest","url","method","data","username","usersecret","headers","then","console","log","result","token","token_expiry","Date","now","status","message","catch","error","err","checkToken","doQuery","query","Authorization","doQueries","Promise","all","queries","map","getVariables","toValue","text","x","value","replaceInterval","slice","range","from","options","utc","format","to","vars","__from","__to","__range","scopedVars","__interval","Object","keys","key","reduce","y","name","id","jsonData","securityEnabled","secret","transformResponse","response","tables","length","table","timestamps","columns","results","i","target","datapoints","idx","parse","push","transformAll","a","b","variables","targets","filter","hide","rawSql","replace","when","annotation","title","column","tags","time","rawQuery","reject","Error"],"mappings":"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","file":"datasource.js","sourcesContent":["export default class Datasource {\n  constructor(instanceSettings, $q, backendSrv, templateSrv) {\n    this.name = instanceSettings.name\n    this.id = instanceSettings.id\n\n    this.url = instanceSettings.jsonData.url\n    this.securityEnabled = instanceSettings.jsonData.securityEnabled\n    this.username =\n      this.securityEnabled && instanceSettings.jsonData.name\n        ? instanceSettings.jsonData.name\n        : 'anonymous'\n    this.usersecret =\n      this.securityEnabled && instanceSettings.jsonData.secret\n        ? instanceSettings.jsonData.secret\n        : ''\n\n    this.token = ''\n    this.token_expiry = Date.now()\n\n    this.$q = $q\n    this.backendSrv = backendSrv\n    this.templateSrv = templateSrv\n  }\n\n  // ---------------------------------------------------------------------------\n\n  login = () =>\n    this.backendSrv\n      .datasourceRequest({\n        url: `${this.url}/api/login`,\n        method: 'POST',\n        data: `{ \"username\": \"${this.username}\", \"secret_key\": \"${this.usersecret}\" }`,\n        headers: {\n          'Content-Type': 'application/json'\n        }\n      })\n      .then(result => {\n        console.log('Getting token')\n        console.log(result)\n        this.token = result.data.token\n        this.token_expiry =\n          Date.now() +\n          10 /* hours */ * 60 /* minutes */ * 60 /* seconds */ * 1000 /* milliseconds */\n        const status = 'success'\n        const message = 'QuasarDB connection is OK!'\n\n        return { status, message }\n      })\n      .catch(err => {\n        const status = 'error'\n        const message =\n          'Unable to connect to datasource. ' + 'See console for detailed information.'\n\n        if (process.env.NODE_ENV !== 'test') {\n          // eslint-disable-next-line no-console\n          console.error('QDB CONNECTION ERROR:', err)\n        }\n\n        return { status, message }\n      })\n\n  // eslint-disable-next-line consistent-return\n  checkToken = () => {\n    if (this.token === '' || this.token_expiry - Date.now() < 1000) {\n      const { status, message } = this.login()\n      if (status === 'error') {\n        return { status, message }\n      }\n    }\n  }\n\n  doQuery = query =>\n    this.backendSrv.datasourceRequest({\n      url: `${this.url}/api/query`,\n      method: 'POST',\n      data: `{ \"query\" : \"${query}\" }`,\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: `Bearer ${this.token}`\n      }\n    })\n\n  doQueries = queries => Promise.all(queries.map(this.doQuery))\n\n  getVariables = options => {\n    const toValue = x => ({\n      text: x,\n      value: x\n    })\n\n    const replaceInterval = x => (x.slice(-1) === 'm' ? `${x}in` : x)\n\n    const range = {\n      from: options.range.from.utc().format('YYYY-MM-DD[T]HH:mm:ss'),\n      to: options.range.to.utc().format('YYYY-MM-DD[T]HH:mm:ss')\n    }\n\n    const vars = {\n      __from: range.from,\n      __to: range.to,\n      __range: `range(${range.from}, ${range.to})`\n    }\n\n    if (options.scopedVars && options.scopedVars.__interval) {\n      const { value } = options.scopedVars.__interval\n      vars.__interval = replaceInterval(value)\n    }\n\n    return {\n      ...options.scopedVars,\n      ...Object.keys(vars)\n        .map(key => ({ [key]: toValue(vars[key]) }))\n        .reduce((x, y) => ({ ...y, ...x }), {})\n    }\n  }\n\n  // ---------------------------------------------------------------------------\n\n  query(options) {\n    this.checkToken()\n    const transformResponse = response => {\n      const result = response.data\n      if (result.tables.length === 0) {\n        return []\n      }\n      const table = result.tables[0]\n      const timestamps = table.columns[0].data\n\n      let results = []\n\n      for (let i = 1; i < table.columns.length; i++) {\n        const target = table.columns[i].name\n        const datapoints = table.columns[i].data.map((value, idx) => [\n          value,\n          Date.parse(timestamps[idx])\n        ])\n        results.push({ target, datapoints })\n      }\n\n      return results\n    }\n\n    const transformAll = results => {\n      const data = results.map(transformResponse).reduce((a, b) => [...a, ...b], [])\n      return { data }\n    }\n\n    const variables = this.getVariables(options)\n    const queries = options.targets\n      .filter(x => !x.hide && x.rawSql)\n      .map(x => this.templateSrv.replace(x.rawSql, variables))\n\n    if (!queries.length) {\n      const data = []\n      return this.$q.when({ data })\n    }\n\n    return this.doQueries(queries).then(results => {\n      console.log(transformAll(results))\n      return transformAll(results)\n    })\n  }\n\n  annotationQuery(options) {\n    this.checkToken()\n    const transformResponse = response => {\n      if (!response.data.tables.length) {\n        return []\n      }\n\n      const data = response.data.tables[0]\n\n      return data.columns.map(column => {\n        const { annotation } = options\n        const { title } = column.name\n        const { text } = column.name\n        const { tags } = []\n\n        const time = Date.parse(data.columns[0].data[0])\n\n        return { annotation, time, title, text, tags }\n      })\n    }\n\n    const rawQuery = options.annotation.query\n\n    if (!rawQuery) {\n      const message = 'Query missing in annotation definition'\n      return this.$q.reject({ message })\n    }\n\n    const variables = this.getVariables(options)\n    const query = this.templateSrv.replace(rawQuery, variables)\n\n    return this.doQuery(query).then(transformResponse)\n  }\n\n  metricFindQuery(query) {\n    console.log('metricFindQuery:', query)\n    throw new Error('metricFindQuery is not yet implemented.')\n  }\n\n  testDatasource() {\n    return this.login()\n  }\n}\n"]}