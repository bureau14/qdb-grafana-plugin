{"version":3,"sources":["../src/datasource.js"],"names":["transformDate","value","maxDurationYear","Date","parse","epochYear","d","console","log","transformValue","v","window","atob","error","transformResponse","response","result","data","tables","length","format","table","colCount","columns","rowCount","map","c","i","text","name","type","rows","row","j","push","timestamps","results","target","datapoints","idx","transformAll","reduce","a","b","Datasource","instanceSettings","$q","backendSrv","templateSrv","doQuery","query","datasourceRequest","url","method","headers","Authorization","token","then","doQueries","Promise","all","queries","getVariables","toValue","x","replaceInterval","slice","range","from","options","utc","to","vars","__from","__to","__range","scopedVars","__interval","Object","keys","key","y","securityEnabled","jsonData","username","usersecret","secret","id","token_expiry","now","status","message","login","Error","variables","targets","filter","t","hide","rawSql","resultFormat","replace","checkToken","transformedResults"],"mappings":"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","file":"datasource.js","sourcesContent":["export function transformDate(value) {\n  const maxDurationYear = Date.parse('1971-01-01')\n  const epochYear = Date.parse('1970-01-01')\n  let d = Date.parse(value)\n  // handle timestamp as duration\n  if (d < maxDurationYear) {\n    console.log('shoud not go there')\n    return d - epochYear\n  }\n  return d\n}\n\nexport function transformValue(value) {\n  if (typeof value == 'string') {\n    try {\n      let v = window.atob(value)\n      return v\n    } catch (error) {\n      return value\n    }\n  }\n  return value\n}\n\nexport function transformResponse(response) {\n  const result = response.data\n  if (result.tables.length === 0) {\n    return []\n  }\n\n  switch (response.data.format) {\n    case 'table': {\n      const table = result.tables[0]\n      const colCount = table.columns.length\n      const rowCount = table.columns[0].data.length\n      const columns = table.columns.map((c, i) => {\n        let result = { text: c.name }\n        if (i === 0) {\n          result.type = 'time'\n        }\n        return result\n      })\n      let rows = []\n      for (let i = 0; i < rowCount; i++) {\n        let row = []\n        for (let j = 0; j < colCount; j++) {\n          const value = table.columns[j].data[i]\n\n          if (j == 0) {\n            row.push(transformDate(value))\n          } else {\n            row.push(transformValue(value))\n          }\n        }\n        rows.push(row)\n      }\n\n      return [\n        {\n          columns,\n          rows,\n          type: 'table'\n        }\n      ]\n    }\n    default: {\n      const table = result.tables[0]\n      const timestamps = table.columns[0].data\n\n      let results = []\n\n      for (let i = 1; i < table.columns.length; i++) {\n        const target = table.columns[i].name\n        const datapoints = table.columns[i].data.map((value, idx) => [\n          value,\n          transformDate(timestamps[idx])\n        ])\n        results.push({ target, datapoints })\n      }\n\n      return results\n    }\n  }\n}\n\nexport function transformAll(results) {\n  const data = results.map(transformResponse).reduce((a, b) => [...a, ...b], [])\n  return { data }\n}\n\nexport default class Datasource {\n  constructor(instanceSettings, $q, backendSrv, templateSrv) {\n    const securityEnabled = instanceSettings.jsonData.securityEnabled\n    const username = securityEnabled ? instanceSettings.jsonData.name : 'anonymous'\n    const usersecret = securityEnabled ? instanceSettings.jsonData.secret : ''\n\n    this.name = instanceSettings.name\n    this.id = instanceSettings.id\n    this.url = instanceSettings.url\n    this.username = username\n    this.usersecret = usersecret\n    this.token = ''\n    this.token_expiry = Date.now()\n\n    this.$q = $q\n    this.backendSrv = backendSrv\n    this.templateSrv = templateSrv\n\n    console.log('-- :: construct')\n  }\n\n  async login() {\n    try {\n      const result = await this.backendSrv.datasourceRequest({\n        url: `${this.url}/api/login`,\n        method: 'POST',\n        data: `{ \"username\": \"${this.username}\", \"secret_key\": \"${this.usersecret}\" }`,\n        headers: {\n          'Content-Type': 'application/json'\n        }\n      })\n\n      this.token = result.data.token\n      this.token_expiry = Date.now() + 10 * 60 * 60 * 1000\n\n      const status = 'success'\n      const message = 'QuasarDB connection is OK!'\n      return { status, message }\n    } catch (err) {\n      const status = 'error'\n      const message = 'Unable to connect to datasource. See console for detailed information.'\n\n      if (process.env.NODE_ENV !== 'dev') {\n        console.error('QDB CONNECTION ERROR:', err)\n      }\n\n      return { status, message }\n    }\n  }\n\n  async checkToken() {\n    if (this.token === '' || this.token_expiry - Date.now() < 1000) {\n      const result = await this.login()\n\n      if (result.status === 'error') {\n        throw new Error(result.message)\n      }\n    }\n\n    return\n  }\n\n  doQuery = ({ query, format }) => {\n    console.log('query:', query)\n    return this.backendSrv\n      .datasourceRequest({\n        url: `${this.url}/api/query`,\n        method: 'POST',\n        data: `{ \"query\" : \"${query}\" }`,\n        headers: { 'Content-Type': 'application/json', Authorization: `Bearer ${this.token}` }\n      })\n      .then(result => {\n        result.data.format = format\n        return result\n      })\n  }\n\n  doQueries = queries => Promise.all(queries.map(this.doQuery))\n\n  getVariables = options => {\n    const toValue = x => ({\n      text: x,\n      value: x\n    })\n\n    const replaceInterval = x => (x.slice(-1) === 'm' ? `${x}in` : x)\n\n    const range = {\n      from: options.range.from.utc().format('YYYY-MM-DD[T]HH:mm:ss'),\n      to: options.range.to.utc().format('YYYY-MM-DD[T]HH:mm:ss')\n    }\n\n    const vars = {\n      __from: range.from,\n      __to: range.to,\n      __range: `range(${range.from}, ${range.to})`\n    }\n\n    if (options.scopedVars && options.scopedVars.__interval) {\n      const { value } = options.scopedVars.__interval\n      vars.__interval = replaceInterval(value)\n    }\n\n    return {\n      ...options.scopedVars,\n      ...Object.keys(vars)\n        .map(key => ({ [key]: toValue(vars[key]) }))\n        .reduce((x, y) => ({ ...y, ...x }), {})\n    }\n  }\n\n  async query(options) {\n    const variables = this.getVariables(options)\n\n    const queries = options.targets\n      .filter(t => !t.hide && t.rawSql)\n      .map(t => {\n        return {\n          format: t.resultFormat,\n          query: this.templateSrv.replace(t.rawSql, variables)\n        }\n      })\n\n    if (!queries.length) {\n      return { data: [] }\n    }\n\n    await this.checkToken()\n    const results = await this.doQueries(queries)\n    const transformedResults = await transformAll(results)\n    return transformedResults\n  }\n\n  annotationQuery(options) {\n    throw new Error('annotations not yet implemented.')\n  }\n\n  metricFindQuery(query) {\n    throw new Error('metrics not yet implemented.')\n  }\n\n  testDatasource() {\n    return this.login()\n  }\n}\n"]}