{"version":3,"sources":["../src/datasource.js"],"names":["Datasource","instanceSettings","$q","backendSrv","templateSrv","doQuery","datasourceRequest","url","method","data","query","headers","Authorization","token","doQueries","Promise","all","queries","map","getVariables","toValue","text","x","value","replaceInterval","slice","range","from","options","utc","format","to","vars","__from","__to","__range","scopedVars","__interval","Object","keys","key","reduce","y","securityEnabled","jsonData","username","name","usersecret","secret","id","token_expiry","Date","now","result","status","message","console","error","login","Error","_this","transformResponse","response","tables","length","table","timestamps","columns","results","i","target","datapoints","idx","parse","push","transformAll","a","b","variables","targets","filter","hide","rawSql","replace","when","checkToken","then","log"],"mappings":"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","file":"datasource.js","sourcesContent":["export default class Datasource {\n  constructor(instanceSettings, $q, backendSrv, templateSrv) {\n    const securityEnabled = instanceSettings.jsonData.securityEnabled\n    const username = securityEnabled ? instanceSettings.jsonData.name : 'anonymous'\n    const usersecret = securityEnabled ? instanceSettings.jsonData.secret : ''\n\n    this.name = instanceSettings.name\n    this.id = instanceSettings.id\n    this.url = instanceSettings.jsonData.url\n    this.username = username\n    this.usersecret = usersecret\n    this.token = ''\n    this.token_expiry = Date.now()\n\n    this.$q = $q\n    this.backendSrv = backendSrv\n    this.templateSrv = templateSrv\n  }\n\n  async login() {\n    try {\n      const result = await this.backendSrv.datasourceRequest({\n        url: `${this.url}/api/login`,\n        method: 'POST',\n        data: `{ \"username\": \"${this.username}\", \"secret_key\": \"${this.usersecret}\" }`,\n        headers: {\n          'Content-Type': 'application/json'\n        }\n      })\n\n      this.token = result.data.token\n      this.token_expiry = Date.now() + 10 * 60 * 60 * 1000\n\n      const status = 'success'\n      const message = 'QuasarDB connection is OK!'\n      return { status, message }\n    } catch (err) {\n      const status = 'error'\n      const message = 'Unable to connect to datasource. See console for detailed information.'\n\n      if (process.env.NODE_ENV !== 'dev') {\n        console.error('QDB CONNECTION ERROR:', err)\n      }\n\n      return { status, message }\n    }\n  }\n\n  async checkToken() {\n    if (this.token === '' || this.token_expiry - Date.now() < 1000) {\n      const result = await this.login()\n\n      if (result.status === 'error') {\n        throw new Error(result.message)\n      }\n    }\n\n    return\n  }\n\n  doQuery = query =>\n    this.backendSrv.datasourceRequest({\n      url: `${this.url}/api/query`,\n      method: 'POST',\n      data: `{ \"query\" : \"${query}\" }`,\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: `Bearer ${this.token}`\n      }\n    })\n\n  doQueries = queries => Promise.all(queries.map(this.doQuery))\n\n  getVariables = options => {\n    const toValue = x => ({\n      text: x,\n      value: x\n    })\n\n    const replaceInterval = x => (x.slice(-1) === 'm' ? `${x}in` : x)\n\n    const range = {\n      from: options.range.from.utc().format('YYYY-MM-DD[T]HH:mm:ss'),\n      to: options.range.to.utc().format('YYYY-MM-DD[T]HH:mm:ss')\n    }\n\n    const vars = {\n      __from: range.from,\n      __to: range.to,\n      __range: `range(${range.from}, ${range.to})`\n    }\n\n    if (options.scopedVars && options.scopedVars.__interval) {\n      const { value } = options.scopedVars.__interval\n      vars.__interval = replaceInterval(value)\n    }\n\n    return {\n      ...options.scopedVars,\n      ...Object.keys(vars)\n        .map(key => ({ [key]: toValue(vars[key]) }))\n        .reduce((x, y) => ({ ...y, ...x }), {})\n    }\n  }\n\n  query(options) {\n    const _this = this\n    const transformResponse = response => {\n      const result = response.data\n      if (result.tables.length === 0) {\n        return []\n      }\n      const table = result.tables[0]\n      const timestamps = table.columns[0].data\n\n      let results = []\n\n      for (let i = 1; i < table.columns.length; i++) {\n        const target = table.columns[i].name\n        const datapoints = table.columns[i].data.map((value, idx) => [\n          value,\n          Date.parse(timestamps[idx])\n        ])\n        results.push({ target, datapoints })\n      }\n\n      return results\n    }\n\n    const transformAll = results => {\n      const data = results.map(transformResponse).reduce((a, b) => [...a, ...b], [])\n      return { data }\n    }\n\n    const variables = this.getVariables(options)\n    const queries = options.targets\n      .filter(x => !x.hide && x.rawSql)\n      .map(x => this.templateSrv.replace(x.rawSql, variables))\n\n    if (!queries.length) {\n      const data = []\n      return this.$q.when({ data })\n    }\n\n    return this.checkToken().then(function() {\n      return _this.doQueries(queries).then(results => {\n        console.log(transformAll(results))\n        return transformAll(results)\n      })\n    })\n  }\n\n  annotationQuery(options) {\n    throw new Error('annotations not yet implemented.')\n  }\n\n  metricFindQuery(query) {\n    throw new Error('metrics not yet implemented.')\n  }\n\n  testDatasource() {\n    return this.login()\n  }\n}\n"]}